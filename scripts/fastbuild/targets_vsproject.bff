
{
    .PlatformVSEnabled = false

    .SolutionProjects = { }
    .SolutionBuildProject = { }
    .SolutionDeployProjects = { }
    .SolutionConfigs = { }

    .SolutionFolders = { }
    .SolutionFolderIndex = 1
    .SolutionFolderGroupNames = { }
    .SolutionFolderCurrentName = ''
    .SolutionFolderCurrentProjects = { }
    .SolutionBuildProjectDependencies = { }

    .AllProjectConfigs = { }
    .AllTestsProjectConfigs = { }
    .HasAnyConfig = false

    Print( '[IBT] Creating vstudio targets...' )

    ForEach( .Pipeline in .AvailablePipelines )
    {
        .VSSuffix = ''
        .VSEnabled = false
        .PipelineVSInfo = []

        Using( .Pipeline )
        Using( .PipelineVSInfo )

        If ( .VSEnabled )
        {
            .PlatformVSName = ''

            Using( .PipelinePlatformInfo )

            If ( .PlatformVSName != .EmptyString )
            {
                .SolutionConfig =
                [
                    .Config = '$PipelineConfig$$VSSuffix$'
                    .Platform = .PlatformVSName

                    .SolutionConfig = '$PipelineConfig$'
                    .SolutionPlatform = '$PipelineName$$VSSuffix$'
                ]
                ^SolutionConfigs + .SolutionConfig

                .AllProjectConfig =
                [
                    Using( .SolutionConfig )

                    .ProjectBuildCommand = '^$(SolutionDir)/$UserScriptFile$ build -t all-$PipelineName$-$PipelineConfig$'
                    .ProjectRebuildCommand = '^$(SolutionDir)/$UserScriptFile$ build -t all-$PipelineName$-$PipelineConfig$ -c'
                ]
                ^AllProjectConfigs + .AllProjectConfig

                // .AllTestsProjectConfig =
                // [
                //     Using( .SolutionConfig )

                //     .ProjectBuildCommand = '^$(SolutionDir)/$UserScriptFile$ build -t test-all-^$(Platform)-^$(Configuration)'
                //     .ProjectRebuildCommand = '^$(SolutionDir)/$UserScriptFile$ build -t test-all-^$(Platform)-^$(Configuration) -c'
                // ]
                // ^AllTestsProjectConfigs + .AllTestsProjectConfig

                ^HasAnyConfig = true
            }
        }
    }

    If ( .HasAnyConfig )
    {
        VCXProject( 'all-vcxproj' )               // (optional) Alias
        {
            .ProjectOutput = '$WorkspaceBuildDir$/projects/all.vcxproj'
            .ProjectConfigs = .AllProjectConfigs
            .ProjectBasePath = .WorkspaceBuildDir
            .ProjectInputPaths = { }

            .IntermediateDirectory = '$WorkspaceBuildDir$/obj/helpers/all'
            .OutputDirectory = '$WorkspaceBuildDir$/obj/helpers/all'
        }

        // VCXProject( 'all-tests-vcxproj' )               // (optional) Alias
        // {
        //     .ProjectOutput = '$WorkspaceBuildDir$/projects/all_tests.vcxproj'
        //     .ProjectConfigs = .AllTestsProjectConfigs
        //     .ProjectBasePath = .WorkspaceBuildDir
        //     .ProjectInputPaths = { }

        //     .IntermediateDirectory = '$WorkspaceBuildDir$/obj/helpers/all_tests'
        //     .OutputDirectory = '$WorkspaceBuildDir$/obj/helpers/all_tests'
        // }

        .SolutionFolder =
        [
            .Path = '0. Miscelaneous'
            .Projects = { 'all-vcxproj' } ;, 'all-tests-vcxproj' }
        ]
        .SolutionFolders + .SolutionFolder

        {
            .HasSolutionItems = false
            ForEach( .Item in .SolutionItems )
            {
                ^HasSolutionItems = true
            }

            If ( .HasSolutionItems )
            {
                .SolutionFolder =
                [
                    .Path = '0. Miscelaneous/Files'
                    .Items = .SolutionItems
                ]
                ^SolutionFolders + .SolutionFolder
            }
        }

        .SolutionBuildProject = { 'all-vcxproj' }
        .PipelineAvailableProjects = [ ]

        ForEach( .Project in .ProjectsResolved )
        {
            Using( .Project )

            .ProjectOutput = '$WorkspaceBuildDir$/projects/$ProjectName$.vcxproj'
            .ProjectConfigs = { }
            .ProjectBasePath = .ProjectBaseDir
            .ProjectInputPaths = .ProjectVStudioInputPaths
            .ProjectFiles = {
                '$ProjectBaseDir$/$ProjectName$.bff'
            }
            .ProjectAllowedFileExtensions = {
                '*.h', '*.c', '*.hpp', '*.cpp', '*.cxx', '*.hxx', '*.inl',
                '*.m', '*.mm',
                '*.rc', '*.resx',
                '*.bff', '*.natvis'
            }

            Using( .Piepline_CompileVSTargets )

            ForEach( .Pipeline in .AvailablePipelines )
            {
                .VSSuffix = ''
                .VSEnabled = false

                Using( .Pipeline )
                Using( .PipelineVSInfo )
                Using( .PipelinePlatformInfo )
                Using( .PipelineOutputExtensions )

                // Check if we the project has all requirements covered
                .ProjectRequirementsSatisfied = true
                {
                    .PipelineIdentifier = '$PipelineName$-$PipelinePlatform$-$PipelineConfig$-$PipelineToolchain$'
                    .'PipelineAvailableProjects_$PipelineIdentifier$' = { }

                    Using( .PipelineAvailableProjects )

                    .AvailableTags = .SDKNames
                        + .PipelineTags
                        + .'PipelineAvailableProjects_$PipelineIdentifier$'

                    ForEach( .Requirement in .ProjectRequires )
                    {
                        If ( .Requirement not in .AvailableTags )
                        {
                            ^ProjectRequirementsSatisfied = false
                        }
                    }
                }

                .ProjectTarget = '$ProjectName$-$PipelineName$-$PipelinePlatform$-$PipelineConfig$-$PipelineToolchain$'

                .OutDirName = .'KindOutDir_$ProjectKind$'
                .TargetExtension = .'OutputExtension_$ProjectKind$'

                .TargetIntermediateDirectory = '$WorkspaceBuildDir$/obj/$PipelineName$/$PipelinePlatform$-$PipelineConfig$-$PipelineToolchain$/$ProjectName$'
                .TargetOutputDirectory = '$WorkspaceBuildDir$/$OutDirName$/$PipelineName$/$PipelinePlatform$-$PipelineConfig$-$PipelineToolchain$/$ProjectName$'
                .TargetOutputName = "$ProjectName$$TargetExtension$"
                .TargetList = { }

                .ProjectConfig =
                [
                    .Config = '$PipelineConfig$$VSSuffix$'
                    .Platform = .PlatformVSName
                ]

                If ( .ProjectRequirementsSatisfied )
                {
                    {
                        .PipelineIdentifier = '$PipelineName$-$PipelinePlatform$-$PipelineConfig$-$PipelineToolchain$'
                        .PipelineAvailableProjects_Extension =
                        [
                            .'PipelineAvailableProjects_$PipelineIdentifier$' = { .ProjectName }
                        ]
                        ^PipelineAvailableProjects + .PipelineAvailableProjects_Extension
                    }

                    If ( .ProjectKind != .Kind_HeaderOnly )
                    {
                        .ProjectConfig_Extension =
                        [
                            .Target = .'CompileTarget_$ProjectTarget$'

                            .Output = .TargetOutputName
                            .OutputDirectory = .TargetOutputDirectory
                            .IntermediateDirectory = .TargetIntermediateDirectory
                            .BuildLogFile = '$TargetIntermediateDirectory$/build_log.txt'

                            .ProjectBuildCommand = '^$(SolutionDir)$UserScriptFile$ build -t $ProjectTarget$'
                            .ProjectRebuildCommand = '^$(SolutionDir)$UserScriptFile$ build -t $ProjectTarget$ -c'

                            .LocalDebuggerCommand = '$TargetOutputDirectory$/$TargetOutputName$'
                            .LocalDebuggerWorkingDirectory = .ProjectDebugDir
                        ]
                        ^ProjectConfig + .ProjectConfig_Extension
                    }
                }

                If ( .ProjectKind == .Kind_HeaderOnly )
                {
                    Using( .Projects_SolutionInfo )
                    Using( .'SolutionInfo_$ProjectTarget$' )
                    Using( .Intellisense )

                    .ProjectConfig_Intellisense =
                    [
                        .PreprocessorDefinitions = ''
                        .IncludeSearchPath = ''
                        .AdditionalOptions = ''

                        ForEach( .Value in .Defines )
                        {
                            ^PreprocessorDefinitions + '$Value$;'
                        }
                        ForEach( .Value in .IncludeDirs )
                        {
                            ^IncludeSearchPath + '$Value$;'
                        }
                        ForEach( .Value in .BuildOptions )
                        {
                            ^AdditionalOptions + '$Value$ '
                        }
                    ]

                    ^ProjectConfig + .ProjectConfig_Intellisense
                }

                ^ProjectConfigs + .ProjectConfig
            }

            VCXProject( '$ProjectName$-vcxproj' )               // (optional) Alias
            {
            }

            If ( .ProjectKind in .Kind_Applications )
            {
                ^SolutionBuildProjectDependencies + '$ProjectName$-vcxproj'
            }

            If ( .ProjectGroup not in .SolutionFolderGroupNames )
            {
                .HasProjects = false
                ForEach( .P in .SolutionFolderCurrentProjects )
                {
                    ^HasProjects = true
                }

                If ( .HasProjects )
                {
                    .SolutionFolder =
                    [
                        .Path = '$SolutionFolderIndex$. $SolutionFolderCurrentName$'
                        .Projects = .SolutionFolderCurrentProjects
                    ]
                    ^SolutionFolders + .SolutionFolder
                    ^SolutionFolderCurrentProjects = { }
                    ^SolutionFolderIndex + 1
                }

                ^SolutionFolderGroupNames + .ProjectGroup
                ^SolutionFolderCurrentName = .ProjectGroup
            }

            If ( .ProjectGroup == .SolutionFolderCurrentName )
            {
                ^SolutionFolderCurrentProjects + '$ProjectName$-vcxproj'
            }

            ^SolutionProjects + '$ProjectName$-vcxproj'
        }

        .SolutionFolder =
        [
            .Path = '$SolutionFolderIndex$. $SolutionFolderCurrentName$'
            .Projects = .SolutionFolderCurrentProjects
        ]
        .SolutionFolders + .SolutionFolder

        .SolutionDependency =
        [
            .Dependencies = { 'all-vcxproj' }
            .Projects = .SolutionBuildProjectDependencies
        ]
        .SolutionDependencies = { .SolutionDependency }

        VSSolution( 'solution' )
        {
            .SolutionOutput = '$WorkspaceRoot$/$UserSolutionName$'
        }
    }

    Print( '[IBT] VStudio targets created.' )

}
