
{
    .PlatformVSEnabled = false

    .SolutionProjects = { }
    .SolutionBuildProject = { }
    .SolutionDeployProjects = { }
    .SolutionConfigs = { }

    .SolutionFolders = { }
    .SolutionFolderIndex = 1
    .SolutionFolderGroupNames = { }
    .SolutionFolderCurrentName = ''
    .SolutionFolderCurrentProjects = { }
    .SolutionBuildProjectDependencies = { }

    ForEach( .TargetConfig in .TargetConfigList )
    {
        Using( .TargetConfig )
        Using( .PlatformInfo )

        If ( .PlatformVSEnabled )
        {
            Using( .Toolchain )

            .SolutionConfig =
            [
                Using( .'PlatformVSProperties_$ToolchainCompilerFamily$_$ToolchainArchitecture$_$ToolchainToolset$' )

                .Config = '$ConfigName$$ProjectConfigSuffix$'
                .Platform = .ProjectPlatform

                .SolutionConfig = '$ConfigName$'
                .SolutionPlatform = .SolutionPlatform

                .ProjectBuildCommand = '^$(SolutionDir)/$UserScriptFile$ build -t all-^$(Platform)-^$(Configuration)'
                .ProjectRebuildCommand = '^$(SolutionDir)/$UserScriptFile$ build -t all-^$(Platform)-^$(Configuration) -c'
            ]
            ^SolutionConfigs + .SolutionConfig
        }
    }

    VCXProject( 'all-vcxproj' )               // (optional) Alias
    {
        .ProjectOutput = '$WorkspaceBuildDir$/projects/all.vcxproj'
        .ProjectConfigs = .SolutionConfigs
        .ProjectBasePath = .WorkspaceBuildDir
        .ProjectInputPaths = { }

        .IntermediateDirectory = '$WorkspaceBuildDir$/obj/helpers/all'
        .OutputDirectory = '$WorkspaceBuildDir$/obj/helpers/all'
    }

    .SolutionFolder =
    [
        .Path = '0. Miscelaneous'
        .Projects = { 'all-vcxproj' }
    ]
    .SolutionFolders + .SolutionFolder

    {
        .HasSolutionItems = false
        ForEach( .Item in .SolutionItems )
        {
            ^HasSolutionItems = true
        }

        If ( .HasSolutionItems )
        {
            .SolutionFolder =
            [
                .Path = '0. Miscelaneous/Files'
                .Items = .SolutionItems
            ]
            ^SolutionFolders + .SolutionFolder
        }
    }

    .SolutionBuildProject = { 'all-vcxproj' }

    ForEach( .Project in .ProjectsResolved )
    {
        Using( .Project )

        .ProjectOutput = '$WorkspaceBuildDir$/projects/$ProjectName$.vcxproj'
        .ProjectConfigs = { }
        .ProjectBasePath = .ProjectBaseDir
        .ProjectInputPaths = .ProjectVStudioInputPaths
        .ProjectFiles = {
            '$ProjectBaseDir$/$ProjectName$.bff'
        }
        .ProjectAllowedFileExtensions = {
            '*.h', '*.c', '*.hpp', '*.cpp', '*.cxx', '*.hxx', '*.inl',
            '*.m', '*.mm',
            '*.rc', '*.resx',
            '*.bff', '*.natvis'
        }

        ForEach( .TargetConfig in .TargetConfigList )
        {
            Using( .TargetConfig )
            Using( .PlatformInfo )
            Using( .PlatformExtensions )
            Using( .Toolchain )

            .OutDirName = .'KindOutDir_$ProjectKind$'
            .TargetExtension = .'OutputExtension_$ProjectKind$'

            .TargetIntermediateDirectory = '$WorkspaceBuildDir$/obj/$ConfigPlatform$-$ConfigName$-$ConfigToolchain$/$ProjectName$'
            .TargetOutputDirectory = '$WorkspaceBuildDir$/$OutDirName$/$ConfigPlatform$-$ConfigName$-$ConfigToolchain$/$ProjectName$'
            .TargetOutputName = "$ProjectName$$TargetExtension$"
            .TargetList = { }

            .ProjectConfig =
            [
                Using( .'PlatformVSProperties_$ToolchainCompilerFamily$_$ToolchainArchitecture$_$ToolchainToolset$' )

                .Config = '$ConfigName$$ProjectConfigSuffix$'
                .Platform = .ProjectPlatform

                .Target = ''
                .TargetAlias = '$ProjectName$-$ConfigPlatform$-$ConfigName$-$ConfigToolchain$'

                .Output = .TargetOutputName
                .OutputDirectory = .TargetOutputDirectory
                .IntermediateDirectory = .TargetIntermediateDirectory
                .BuildLogFile = '$TargetIntermediateDirectory$/build_log.txt'

                .ProjectBuildCommand = ''
                .ProjectRebuildCommand = ''

                If ( .TargetAlias in .AllConfigTargets )
                {
                    If ( .ProjectKind != .Kind_HeaderOnly )
                    {
                        ^Target = '$TargetAlias$-objects'
                    }

                    ^ProjectBuildCommand = '^$(SolutionDir)$UserScriptFile$ build -t $TargetAlias$'
                    ^ProjectRebuildCommand = '^$(SolutionDir)$UserScriptFile$ build -t $TargetAlias$ -c'
                }

                .LocalDebuggerCommand = '$TargetOutputDirectory$/$TargetOutputName$'
                .LocalDebuggerWorkingDirectory = .ProjectDebugDir
            ]

            If ( .ProjectKind == .Kind_HeaderOnly )
            {
                .TargetAlias = '$ProjectName$-$ConfigPlatform$-$ConfigName$-$ConfigToolchain$'

                Using( .Projects_SolutionInfo )
                Using( .'SolutionInfo_$TargetAlias$' )
                Using( .Intellisense )

                .ProjectConfig_Intellisense =
                [
                    .PreprocessorDefinitions = ''
                    .IncludeSearchPath = ''
                    .AdditionalOptions = ''

                    ForEach( .Value in .Defines )
                    {
                        ^PreprocessorDefinitions + '$Value$;'
                    }
                    ForEach( .Value in .IncludeDirs )
                    {
                        ^IncludeSearchPath + '$Value$;'
                    }
                    ForEach( .Value in .BuildOptions )
                    {
                        ^AdditionalOptions + '$Value$ '
                    }
                ]

                ^ProjectConfig + .ProjectConfig_Intellisense
            }

            ^ProjectConfigs + .ProjectConfig
        }

        VCXProject( '$ProjectName$-vcxproj' )               // (optional) Alias
        {
        }

        If ( .ProjectKind in .Kind_Applications )
        {
            ^SolutionBuildProjectDependencies + '$ProjectName$-vcxproj'
        }

        If ( .ProjectGroup not in .SolutionFolderGroupNames )
        {
            .HasProjects = false
            ForEach( .P in .SolutionFolderCurrentProjects )
            {
                ^HasProjects = true
            }

            If ( .HasProjects )
            {
                .SolutionFolder =
                [
                    .Path = '$SolutionFolderIndex$. $SolutionFolderCurrentName$'
                    .Projects = .SolutionFolderCurrentProjects
                ]
                ^SolutionFolders + .SolutionFolder
                ^SolutionFolderCurrentProjects = { }
                ^SolutionFolderIndex + 1
            }

            ^SolutionFolderGroupNames + .ProjectGroup
            ^SolutionFolderCurrentName = .ProjectGroup
        }

        If ( .ProjectGroup == .SolutionFolderCurrentName )
        {
            ^SolutionFolderCurrentProjects + '$ProjectName$-vcxproj'
        }

        ^SolutionProjects + '$ProjectName$-vcxproj'
    }

    .SolutionFolder =
    [
        .Path = '$SolutionFolderIndex$. $SolutionFolderCurrentName$'
        .Projects = .SolutionFolderCurrentProjects
    ]
    .SolutionFolders + .SolutionFolder

    .SolutionDependency =
    [
        .Dependencies = { 'all-vcxproj' }
        .Projects = .SolutionBuildProjectDependencies
    ]
    .SolutionDependencies = { .SolutionDependency }

    VSSolution( 'solution' )
    {
        .SolutionOutput = '$WorkspaceRoot$/$UserSolutionName$'
    }
}
