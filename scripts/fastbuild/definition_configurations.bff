
.AvailablePlatforms = { }
.AvailablePlatformsNames = { }
.AvailableToolchains = .ToolchainList
.AvailableToolchainsNames = .ToolchainNames
.AvailableTargets = { }
.AvailablePipelines = { }

//
// We search for available platform on a given system
//
ForEach( .PlatformName in .PlatformNames, .Platform in .PlatformList )
{
    Using( .Platform )

    .PlatformAvailable = true
    .PlatformSDKInfo = []

    ForEach ( .Requirement in .PlatformRequiredSDKs )
    {
        If ( .Requirement not in .PlatformSDKNames)
        {
            ^PlatformAvailable = false
        }
    }

    If ( .PlatformAvailable )
    {
        .PlatformTags = { }
        {
            ForEach( .PlatformSDKName in .PlatformSDKNames, .PlatformSDK in .PlatformSDKList )
            {
                If ( .PlatformSDKName in .PlatformRequiredSDKs )
                {
                    Using( .PlatformSDK )
                    ^PlatformTags + .Tags
                }
            }
        }

        .Platform_Extended =
        [
            Using( .Platform )
            .PlatformTags = .PlatformTags
        ]

        ^AvailablePlatforms + .Platform_Extended
        ^AvailablePlatformsNames + .PlatformName
    }
}

//
// Create a list of platform+toolchain that are compatible with each other.
//   This will simplify not only debugging but also finding the right one when checking against pipelines.

ForEach( .PlatformName in .AvailablePlatformsNames, .Platform in .AvailablePlatforms )
{
    .PlatformVSInfo = []

    Using( .Platform )

    ForEach( .ToolchainName in .AvailableToolchainsNames, .Toolchain in .AvailableToolchains )
    {
        Using( .Toolchain )

        ForEach( .PlatformArchitecture in .PlatformSupportedArchitectures )
        {
            If ( .PlatformArchitecture in .ToolchainSupportedArchitectures )
            {
                .Target =
                [
                    .TargetSystem = .PlatformSystem
                    // .TargetPlatform = .PlatformName
                    .TargetArchitecture = .PlatformArchitecture
                    .TargetToolchain = .ToolchainName
                    .TargetCompatibility = {
                        .PlatformName
                        // .ToolchainCompilerFamily
                        .ToolchainName
                        .TargetArchitecture
                    }

                    .TargetPlatformInfo = .Platform
                    .TargetToolchainInfo = .Toolchain
                    .TargetRules = { }
                    .TargetTags = { }

                    // Extensions
                    .TargetVSArchitecture = ''
                ]

                // Platform output dir suffix extensions
                {
                    .OutputDirArchitectureSuffixes = []
                    .'OutputSuffix_$PlatformArchitecture$' = ''
                    Using( .PlatformExtensions )
                    Using( .OutputDirArchitectureSuffixes )

                    .TargetExt =
                    [
                        .TargetOutputDirSuffix = .'OutputSuffix_$PlatformArchitecture$'
                    ]
                    ^Target + .TargetExt
                }

                // VStudio compat
                {
                    .VSEnabled = false
                    Using( .PlatformVSInfo )

                    If ( .VSEnabled )
                    {
                        .TargetExt =
                        [
                            .TargetVSArchitecture = .'VSArch_$PlatformArchitecture$'
                        ]
                        ^Target + .TargetExt
                    }
                }

                ^AvailableTargets + .Target
            }
        }
    }
}

//
// Once we have available platforms (and toolchains from the generation step)
//  we can start to check if we have pipelines defined for any platform + tolchain pairs
//
ForEach( .Pipeline in .BuildPipelines )
{
    Using( .Pipeline )

    .HasPipelineStepsDefined = false
    ForEach( ._ in .PipelineSteps )
    {
        ^HasPipelineStepsDefined = true
    }

    If ( !.HasPipelineStepsDefined )
    {
        Error( "Pipeline missing list of steps!" )
    }

    // Find all compatible targets
    .PipelineTargets = { }
    {
        // Create a requirements list
        .PipelineFlavours = { }
        .PipelineRequirements = { .PipelinePlatform, .PipelineToolchain, .PipelineArchitecture }

        ForEach ( .Target in .AvailableTargets )
        {
            Using( .Target )

            .FlavoursUsed = false
            .FlavourTags = { }
            .FlavourFound = false
            .FlavourRules = { }
            {
                .PlatformFlavours = { }
                Using( .TargetPlatformInfo )
                {
                    ForEach( .Flavour in .PlatformFlavours )
                    {
                        ^FlavoursUsed = true
                        Using( .'PlatformFlavour_$Flavour$' )

                        .Value = ''
                        .'$Flavour$' = ''
                        {
                            Using( .Pipeline )
                            .FlavourVar = ^Flavour
                            ^Value = .'$FlavourVar$'
                        }

                        ^FlavourTags + '$Prefix$$Value$$Suffix$'
                    }

                    .FlavourCompatibility = { .PipelineToolchain, .PipelineArchitecture } + .FlavourTags

                    ForEach( .PlatformSDKName in .PlatformSDKNames, .PlatformSDK in .PlatformSDKList )
                    {
                        If ( .PlatformSDKName in .PlatformRequiredSDKs )
                        {
                            .Flavours = { }
                            Using( .PlatformSDK )

                            ForEach( .SDKFlavour in .Flavours )
                            {
                                Using( .SDKFlavour )

                                .FlavourSelected = true
                                ForEach( .FlavourRequirement in .Requires )
                                {
                                    If ( .FlavourRequirement not in .FlavourCompatibility )
                                    {
                                        ^FlavourSelected = false
                                    }
                                }

                                If( .FlavourSelected )
                                {
                                    ^FlavourFound = true

                                    .FlavourRule =
                                    [
                                        Using( .SDKFlavour )
                                        .Name = 'Rule_$Name$'
                                        .Requires = { }
                                    ]
                                    ^FlavourRules + .FlavourRule
                                }
                            }
                        }
                    }
                }

            } // .FlavoursUsed

            .TargetCompatible = true
            If ( .FlavoursUsed )
            {
                ^TargetCompatible = .FlavourFound

                .TargetExtension =
                [
                    .TargetTags = .FlavourTags
                    .TargetRules = .FlavourRules
                ]
                ^Target + .TargetExtension
            }

            If ( .TargetCompatible )
            {
                ForEach ( .Requirement in .PipelineRequirements )
                {
                    If ( .Requirement not in .TargetCompatibility )
                    {
                        ^TargetCompatible = false
                    }
                }
            }

            If ( .TargetCompatible )
            {
                ^PipelineTargets + .Target
            }
        }
    }

    // Create a pipeline entry for each supported target
    ForEach( .PipelineTarget in .PipelineTargets )
    {
        Using( .PipelineTarget )
        Using( .TargetPlatformInfo )
        Using( .TargetToolchainInfo )

        ForEach( .Configuration in .ConfigurationList )
        {
            .ConanConfiguration = 'UNUSED'

            Using( .Configuration )

            .AvailableTags = .PlatformTags + .PlatformRequiredSDKs
                + .TargetSystem
                + .TargetArchitecture
                + .TargetToolchain
                + .ToolchainToolset
                + .ToolchainCompilerFamily
                + "$ToolchainFrontend$-Frontend"
                + "$ToolchainCompilerFamily$-$ToolchainToolset$"
                + .ConfigurationName

            .PipelineStepTasks = [ ]
            {
                // Tasks check their requirements at a later stage when project info is also available
                ForEach( .PipelineStep in .PipelineSteps )
                {
                    .StepTasks = { }
                    ForEach( .Task in .PipelineTasks )
                    {
                        .TaskRequires = { }

                        Using( .Task )

                        .HasRequiredTags = true
                        ForEach( .Requirement in .TaskRequires )
                        {
                            If ( .Requirement not in .AvailableTags )
                            {
                                ^HasRequiredTags = false
                            }
                        }

                        If ( .PipelineStep == .Step )
                        {
                            If ( .HasRequiredTags )
                            {
                                ^StepTasks + .Task
                            }
                        }
                    }

                    .PipelineStepTasks_Extension =
                    [
                        .'$PipelineStep$_Tasks' = .StepTasks
                    ]
                    ^PipelineStepTasks + .PipelineStepTasks_Extension
                }
            }

            .AvailablePipelineConfig =
            [
                .PipelineTags = { }
                .PipelineConanProfile = ''
                Using( .Pipeline )

                // Temporaries
                .TempCustomPipelineTags = .PipelineTags
                .TempConanProfile = .PipelineConanProfile

                .PipelineStepTasks = .PipelineStepTasks
                .PipelinePlatformInfo =
                [
                    Using( .TargetPlatformInfo )
                    .PlatformVSName = .TargetVSArchitecture
                ]
                .PipelineRules = .PlatformRules + .TargetRules
                .PipelineToolchainInfo = .TargetToolchainInfo
                .PipelineToolchainStruct = "$ToolchainCompilerFamily$_$ToolchainToolset$"
                .PipelineConfig = .ConfigurationName
                .PipelineConfigConan = .ConanConfiguration
                .PipelineConfigConanProfile = '$PipelineConanProfile$-$ConanConfiguration$'
                .PipelineOutputExtensions = .PlatformExtensions
                .PipelineOutputDirSuffix = .TargetOutputDirSuffix

                .PipelineTags = {
                    .TargetSystem
                    .TargetArchitecture
                    .TargetToolchain
                    .TargetTags
                    .ToolchainToolset
                    .ToolchainCompilerFamily
                    "$ToolchainFrontend$-Frontend"
                    "$ToolchainCompilerFamily$-$ToolchainToolset$"
                    .ConfigurationName
                } + .PlatformTags + .PlatformRequiredSDKs + .TempCustomPipelineTags

                .PipelineAvailableSDKs = { }
                .PipelineProperties_SDKs = [ .Defines = { } ]
                ForEach( .SDKName in .SDKNames, .SDK in .SDKList )
                {
                    .SDKSupportedPlatforms = { }
                    Using( .SDK )
                    If ( .PipelinePlatform in .SDKSupportedPlatforms )
                    {
                        ^PipelineAvailableSDKs + .SDKName
                        If ( .SDKName in .PlatformRequiredSDKs )
                        {
                            ^PipelineProperties_SDKs + .SDK
                        }
                    }
                }
                ForEach( .SDKName in .PlatformSDKNames, .SDK in .PlatformSDKList )
                {
                    If ( .SDKName in .PlatformRequiredSDKs )
                    {
                        ^PipelineProperties_SDKs + .SDK
                    }
                }

                .PipelineProperties_Toolchain =
                [
                    .Defines = { }
                    .IncludeDirs = .ToolchainIncludeDirs
                    .LibDirs = .ToolchainLibDirs
                    .Libs = .ToolchainLibs
                ]
            ]

            ^AvailablePipelines + .AvailablePipelineConfig

        } // ForEach( .Configuration in .ConfigurationList )

    } // .PipelineTargetFound

}
