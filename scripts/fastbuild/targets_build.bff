
.KindOutDir_StaticLib = 'lib'
.KindOutDir_SharedLib = 'bin'
.KindOutDir_ConsoleApp = 'bin'
.KindOutDir_WindowedApp = 'bin'
.KindOutDir_HeaderOnly = 'inc'
.KindOutDir_ObjectList = ''

.ConanVariables_StaticLib = { 'IncludeDirs', 'Defines' }
.ConanVariables_SharedLib = { 'IncludeDirs', 'Defines', 'LibDirs', 'Libs' }
.ConanVariables_ConsoleApp = { 'IncludeDirs', 'Defines', 'LibDirs', 'Libs' }
.ConanVariables_WindowedApp = { 'IncludeDirs', 'Defines', 'LibDirs', 'Libs' }
.ConanVariables_HeaderOnly = { 'IncludeDirs', 'Defines' }
.ConanVariables_ObjectList = { 'IncludeDirs', 'Defines' }

.AllConfigTargets = { }
.AllConfigTargetsSkipped = { }
.AllConfigFinalProperties = [ ]

.Projects_SolutionInfo = [ ]

.Final_GlobalRules = { }
ForEach( .GlobalRule in .GlobalRules )
{
    Using( .EmptyProperties )
    Using( .GlobalRule )

    .Final_GlobalRule =
    [
        .Name = .Name
        .RuleRequires = .Requires
        .RuleDependsOn = []
        .RuleProperties_Public = [ ]
        .RuleProperties_Private =
        [
            .Uses = .Uses
            .Modules = ^Modules
            .IncludeDirs = ^IncludeDirs
            .Defines = ^Defines
            .BuildOptions = ^BuildOptions
            .Libs = ^Libs
            .LibDirs = ^LibDirs
        ]
    ]
    ^Final_GlobalRules + .Final_GlobalRule
}

ForEach( .TargetConfig in .TargetConfigList )
{
    Using( .TargetConfig )

    Using( .PlatformInfo )
    Using( .PlatformExtensions )

    .ConfigTargets = { }
    .ConfigTargetsTests = { }

    ForEach( .Project in .ProjectsResolved )
    {
        Using( .Project )

        .AvailableTags = { }
            + .AllConfigTargets
            + .ProjectTags
            + .ProjectKind
            + .ConfigTags
            + .SDKNames

        .ProjectConfigTarget = '$ProjectName$-$ConfigPlatform$-$ConfigName$-$ConfigToolchain$'

        .ProjectRequirementsSatisfied = true
        {
            .ProjectConfigRequires = .ProjectRequires
            ForEach( .Requirement in .ProjectConfigRequires )
            {
                If ( .Requirement not in .AvailableTags )
                {
                    Print( "INFO: $ProjectName$ is missing requirement `$Requirement$` for ($ConfigPlatform$-$ConfigName$-$ConfigToolchain$)" )
                    ^ProjectRequirementsSatisfied = false
                }
            }
        }

        If ( !.ProjectRequirementsSatisfied )
        {
            .ConfigFinalPublicProperties_Helper =
            [
                .'FinalProperties_$ProjectConfigTarget$' =
                [
                    .HasLinkTarget = false
                ]
            ]
            ^AllConfigFinalProperties + .ConfigFinalPublicProperties_Helper
            ^AllConfigTargetsSkipped + .ProjectConfigTarget
        }

        If ( .ProjectRequirementsSatisfied )
        {
            Using( .EmptyProperties )

            .ConfigFinalRequires = .ProjectRequires
            .ConfigFinalDependencies = [ ] // .DependsOn
            .ConfigFinalSDKProperties = .SDKProperties

            .ConfigFinalProperties = [ ]
            .ConfigFinalPublicProperties = [ ]

            .ConfigFinalRules = .ProjectRules + .Final_GlobalRules

            // .ConfigHasDeploySteps = false
            .ConfigFinalUnitTests = [ ]
            .ConfigFinalDeploys = { }

            ForEach( .ProjectRule in .ConfigFinalRules )
            {
                .RuleRequires = { }

                .RuleRequirementsSatisfied = true
                {
                    .Name = "<null>"

                    Using( .EmptyProperties )
                    Using( .ProjectRule )

                    ForEach( .Dependency in .Uses )
                    {
                        ^RuleRequires + '$Dependency$-$ConfigPlatform$-$ConfigName$-$ConfigToolchain$'
                    }

                    ForEach( .Requirement in .RuleRequires )
                    {
                        If ( .Requirement not in .AvailableTags )
                        {
                            // Print( "INFO: $ProjectName$ rule '$Name$' is missing '$Requirement$' for ($ConfigPlatform$-$ConfigName$-$ConfigToolchain$)" )
                            ^RuleRequirementsSatisfied = false
                        }
                    }
                }

                If ( .RuleRequirementsSatisfied )
                {
                    .RuleKind = .Kind_None
                    .RuleDeploy =
                    [
                        .Executable = .EmptyString
                    ]
                    .RuleUnitTests =
                    [
                        .Enabled = false
                    ]

                    Using( .ProjectRule )

                    // Update project kind if needed
                    If ( .RuleKind != .Kind_None )
                    {
                        ^ProjectKind = .RuleKind
                    }

                    // Gether dependency properties
                    .GatheredDependencies = { }
                    .GatheredProperties = {
                        'Modules'
                        'Defines'
                        'IncludeDirs'
                        'BuildOptions'
                        'Libs'
                        'LibDirs'
                    }

                    Using( .AllConfigFinalProperties )

                    .RuleFinalPublicProperties =
                    [
                        Using( .RuleProperties_Public )

                        // Gather public uses
                        {
                            .UsesUnique = .Uses
                            ForEach( .Dependency in .Uses )
                            {
                                .DependencyTarget = '$Dependency$-$ConfigPlatform$-$ConfigName$-$ConfigToolchain$'
                                Using( .'FinalProperties_$DependencyTarget$' )

                                ForEach( .Value in .Uses )
                                {
                                    If ( .Value not in .UsesUnique )
                                    {
                                        ^UsesUnique + .Value
                                    }
                                }
                            }
                            ^Uses = .UsesUnique
                        }
                    ]

                    .RuleFinalPrivateProperties =
                    [
                        Using( .RuleProperties_Private )

                        // Gather public uses
                        {
                            .UsesUnique = .Uses
                            ForEach( .Dependency in .Uses )
                            {
                                .DependencyTarget = '$Dependency$-$ConfigPlatform$-$ConfigName$-$ConfigToolchain$'
                                Using( .'FinalProperties_$DependencyTarget$' )

                                ForEach( .Value in .Uses )
                                {
                                    If ( .Value not in .UsesUnique )
                                    {
                                        ^UsesUnique + .Value
                                    }
                                }
                            }
                            ^Uses = .UsesUnique
                        }
                    ]

                    .RuleFinalProperties =
                    [
                        .RuleFinalCombinedProperties  = [ ]
                            + .RuleFinalPrivateProperties
                            + .RuleFinalPublicProperties

                        Using( .RuleFinalCombinedProperties )

                        .LibraryTargets = { }

                        ForEach( .Dependency in .Uses )
                        {
                            If ( .Dependency not in .GatheredDependencies )
                            {
                                ^GatheredDependencies + .Dependency
                                .DependencyTarget = '$Dependency$-$ConfigPlatform$-$ConfigName$-$ConfigToolchain$'
                                // Print( "$ProjectName$: Gathering $Dependency$..." )

                                ForEach( .Property in .GatheredProperties )
                                {
                                    Using( .'FinalProperties_$DependencyTarget$' )
                                    ^'$Property$' + .'$Property$'
                                }

                                {
                                    Using( .'FinalProperties_$DependencyTarget$' )
                                    If ( .HasLinkTarget )
                                    {
                                        ^LibraryTargets + .Dependency
                                    }
                                }
                            }
                        }
                        .Uses = .GatheredDependencies
                    ]

                    ^ConfigFinalPublicProperties + .RuleFinalPublicProperties
                    ^ConfigFinalProperties + .RuleFinalProperties
                    ^ConfigFinalRequires + .RuleRequires
                    ^ConfigFinalDependencies + .RuleDependsOn

                    {
                        Using( .RuleDeploy )
                        If ( .Executable != .EmptyString )
                        {
                            .DeployEntry =
                            [
                                .DeployName = .RuleName
                                Using( .RuleDeploy )
                            ]
                            ^ConfigFinalDeploys + .DeployEntry
                            // ^ConfigHasDeploySteps = true
                        }
                    }

                    {
                        Using( .RuleUnitTests )
                        If ( .Enabled )
                        {
                            ^ConfigFinalUnitTests = .RuleUnitTests
                        }
                    }
                }
            }

            {
                .ConfigFinalPublicProperties_Helper =
                [
                    .'FinalProperties_$ProjectConfigTarget$' =
                    [
                        Using( .ConfigFinalPublicProperties )

                        .HasLinkTarget = true
                        If ( .ProjectKind == .Kind_HeaderOnly )
                        {
                            ^HasLinkTarget = false
                        }
                    ]
                ]
                ^AllConfigFinalProperties + .ConfigFinalPublicProperties_Helper
            }

            Using( .ConfigFinalProperties )

            // Print( "Target: $ProjectName$-$ConfigPlatform$-$ConfigName$-$ConfigToolchain$" )

            .OutDirName = .'KindOutDir_$ProjectKind$'
            .TargetExtension = .'OutputExtension_$ProjectKind$'

            .TargetIntermediateDirectory = '$WorkspaceBuildDir$/obj/$ConfigPlatform$-$ConfigName$-$ConfigToolchain$/$ProjectName$'
            .TargetImpLibDirectory = '$WorkspaceBuildDir$/lib/$ConfigPlatform$-$ConfigName$-$ConfigToolchain$/$ProjectName$'
            .TargetOutputDirectory = '$WorkspaceBuildDir$/$OutDirName$/$ConfigPlatform$-$ConfigName$-$ConfigToolchain$/$ProjectName$'
            .TargetTestOutputDirectory = '$WorkspaceBuildDir$/tests/$ConfigPlatform$-$ConfigName$-$ConfigToolchain$'
            .TargetOutputName = "$ProjectName$$TargetExtension$"
            .TargetList = { }

            // Print( "IntDir: $TargetIntermediateDirectory$" )
            // Print( "LibDir: $TargetImpLibDirectory$" )
            // Print( "Output: $TargetOutputDirectory$/$TargetName$" )

            // Build dependency lists
            //--------------------------------------------------------------------------
            .TargetBuildDependencies = {}
            .TargetLinkDependencies = {}
            .TargetRuntimeDependencies = {}

            {
                .Build = {}
                .Link = {}
                .Runtime = {}

                Using( .ConfigFinalDependencies )

                .Vars = { 'Build', 'Link', 'Runtime' }
                ForEach( .Var in .Vars )
                {
                    ForEach( .Dependency in .'$Var$' )
                    {
                        .DependencyTargetName = '$Dependency$-$ConfigPlatform$-$ConfigName$-$ConfigToolchain$'
                        If ( .DependencyTargetName in .AllConfigTargets )
                        {
                            ^'Target$Var$Dependencies' + .DependencyTargetName
                        }
                    }
                }
            }

            Using( .ConfigFrontend )
            .FinalProperties = []
            {
                ^FinalProperties + .FrontendProperties
                ^FinalProperties + .ConfigProperties
                ^FinalProperties + .ConfigFinalProperties
            }
            Using( .FinalProperties )

            // Project specific SDK
            ForEach( .SDKName in .SDKNames, .SDK in .SDKList )
            {
                If ( .SDKName not in .ConfigTags )
                {
                    If ( .SDKName in .ConfigFinalRequires )
                    {
                        ^ConfigFinalSDKProperties + .SDK
                    }
                }
            }

            // Compiler flags
            //--------------------------------------------------------------------------
            {
                Using( .Toolchain )
                Using( .ConfigFinalSDKProperties )

                .IncludeDirs
                    + .SdkIncludeDirs
                    + .ToolchainIncludeDirs
                .LibDirs
                    + .SdkLibDirs
                    + .ToolchainLibDirs
                .Libs
                    + .SdkLibs
                    + .ToolchainLibs

                .Variables = {
                    'IncludeDirs'
                    'Defines'
                    'BuildOptions'
                    // 'CompilerFlags'
                    'LibDirs'
                    'Libs'
                }

                ForEach( .Var in .Variables )
                {
                    Using( .'FrontendFlag_$Var$' )
                    ForEach( .Value in .'$Var$' )
                    {
                        ^'$FlagVariable$' + ' $FlagPrefix$$Value$$FlagSuffix$'
                    }
                }

                If ( .ProjectKind == .Kind_HeaderOnly )
                {
                    .Project_SolutionInfo =
                    [
                        .'SolutionInfo_$ProjectConfigTarget$' =
                        [
                            .Intellisense =
                            [
                                .IncludeDirs = .IncludeDirs
                                .Defines = .Defines
                                .BuildOptions = .BuildOptions
                            ]
                        ]
                    ]
                    ^Projects_SolutionInfo + .Project_SolutionInfo
                }
            }

            // Conan Modules
            //--------------------------------------------------------------------------
            .HasRuntimeDependencies = false

            ForEach( .ConanModule in .Modules )
            {
                Using( .'ConanModule_$ConanModule$_$ConanConfigName$' )

                ForEach( .Var in .'ConanVariables_$ProjectKind$' )
                {
                    Using( .'FrontendFlag_$Var$' )
                    ForEach( .Value in .'$Var$' )
                    {
                        ^'$FlagVariable$' + ' $FlagPrefix$$Value$$FlagSuffix$'
                    }
                }

                If ( .CopyModules )
                {

                    .CopyDirs = false
                    .CopyDirsList = { }
                    ForEach( .BinDir in .BinDirs )
                    {
                        ^CopyDirs = true
                        ^CopyDirsList + "$BinDir$/"
                    }

                    If ( .CopyDirs )
                    {
                        CopyDir( '$ProjectName$-$ConfigPlatform$-$ConfigName$-$ConfigToolchain$-$ConanModule$-copydir' )
                        {
                            .SourcePaths = .CopyDirsList
                            .SourcePathsPattern = '*.dll'
                            .Dest = .TargetOutputDirectory
                        }
                        ^TargetRuntimeDependencies + '$ProjectName$-$ConfigPlatform$-$ConfigName$-$ConfigToolchain$-$ConanModule$-copydir'
                        ^HasRuntimeDependencies = true
                    }
                }
            }

            If( .ProjectKind != .Kind_HeaderOnly )
            {
                Using( .Toolchain )

                {
                    .Compiler = .ToolchainCompiler
                    .CompilerOutputPath = .TargetIntermediateDirectory
                    .CompilerInputUnity = { }
                    .CompilerInputPath = .ProjectSourcePaths
                    .CompilerInputPattern = { '*.c', '*.cpp', '*.cxx' }

                    // Unity files
                    //--------------------------------------------------------------------------
                    If ( .UnityBuilds )
                    {
                        Unity( '$ProjectName$-$ConfigPlatform$-$ConfigName$-$ConfigToolchain$-unity' )
                        {
                            .UnityInputPath = .ProjectSourcePaths
                            .UnityInputPattern = { '*.c', '*.cpp', '*.cxx' }
                            .UnityOutputPath = .TargetIntermediateDirectory
                            .UnityOutputPattern = 'unity_$ProjectName$_*.cxx'
                        }

                        // Reset compiler input paths
                        ^CompilerInputUnity = '$ProjectName$-$ConfigPlatform$-$ConfigName$-$ConfigToolchain$-unity'
                        ^CompilerInputPath = { }
                    }

                    // Object list
                    //--------------------------------------------------------------------------
                    ObjectList( '$ProjectName$-$ConfigPlatform$-$ConfigName$-$ConfigToolchain$-objects' )
                    {
                    }
                }

                // Object List target
                If ( .ProjectKind == .Kind_ObjectList )
                {
                    Alias( '$ProjectName$-$ConfigPlatform$-$ConfigName$-$ConfigToolchain$-link' )
                    {
                        .Targets = {
                            '$ProjectName$-$ConfigPlatform$-$ConfigName$-$ConfigToolchain$-objects'
                        }
                    }

                    ^TargetList + '$ProjectName$-$ConfigPlatform$-$ConfigName$-$ConfigToolchain$-link'
                }

                // Static Library target
                //--------------------------------------------------------------------------
                If ( .ProjectKind == .Kind_StaticLib )
                {
                    .Compiler = .ToolchainCompiler
                    .CompilerOutputPath = .TargetIntermediateDirectory

                    .Librarian = .ToolchainLibrarian
                    .LibrarianAdditionalInputs = '$ProjectName$-$ConfigPlatform$-$ConfigName$-$ConfigToolchain$-objects'
                    .LibrarianOutput = '$TargetOutputDirectory$/$TargetOutputName$'

                    Library( '$ProjectName$-$ConfigPlatform$-$ConfigName$-$ConfigToolchain$-link' )
                    {
                    }

                    ^TargetList + '$ProjectName$-$ConfigPlatform$-$ConfigName$-$ConfigToolchain$-link'
                }

                // Shared Library target
                //--------------------------------------------------------------------------
                If ( .ProjectKind == .Kind_SharedLib )
                {
                    .Libraries = { '$ProjectName$-$ConfigPlatform$-$ConfigName$-$ConfigToolchain$-objects' }
                    ForEach( .Library in .LibraryTargets )
                    {
                        ^Libraries + '$Library$-$ConfigPlatform$-$ConfigName$-$ConfigToolchain$-link'
                    }

                    .Linker = .ToolchainLinker
                    .LinkerOutput = '$TargetOutputDirectory$/$TargetOutputName$'
                    .LinkerOptions + .'LinkerOptions_$ProjectKind$'

                    DLL( '$ProjectName$-$ConfigPlatform$-$ConfigName$-$ConfigToolchain$-link' )
                    {
                    }

                    ^TargetList + '$ProjectName$-$ConfigPlatform$-$ConfigName$-$ConfigToolchain$-link'
                }

                // Executable targets
                //--------------------------------------------------------------------------
                If ( .ProjectKind in .Kind_Applications )
                {
                    .Libraries = { '$ProjectName$-$ConfigPlatform$-$ConfigName$-$ConfigToolchain$-objects' }
                    ForEach( .Library in .LibraryTargets )
                    {
                        ^Libraries + '$Library$-$ConfigPlatform$-$ConfigName$-$ConfigToolchain$-link'
                    }

                    .Linker = .ToolchainLinker
                    .LinkerOutput = '$TargetOutputDirectory$/$TargetOutputName$'
                    .LinkerOptions + .'LinkerOptions_$ProjectKind$'

                    Executable( '$ProjectName$-$ConfigPlatform$-$ConfigName$-$ConfigToolchain$-link' )
                    {
                    }

                    ^TargetList + '$ProjectName$-$ConfigPlatform$-$ConfigName$-$ConfigToolchain$-link'
                }

                If ( .ProjectKind in .Kind_Applications )
                {
                    .Enabled = false

                    Using( .ConfigFinalUnitTests )
                    If ( .Enabled )
                    {
                        .TestExecutable = '$ProjectName$-$ConfigPlatform$-$ConfigName$-$ConfigToolchain$-link'
                        .TestOutput = '$TargetTestOutputDirectory$/$ProjectName$_test_results.txt'
                        .TestWorkingDir = '$WorkspaceBuildDir$'

                        Test( '$ProjectName$-$ConfigPlatform$-$ConfigName$-$ConfigToolchain$-test' )
                        {
                        }

                        ^ConfigTargetsTests + '$ProjectName$-$ConfigPlatform$-$ConfigName$-$ConfigToolchain$-test'
                    }
                }

                ForEach( .DeployEntry in .ConfigFinalDeploys )
                {
                    .Arguments = ''
                    .Inputs = { }
                    .Output = ''

                    Using( .DeployEntry )

                    If ( .Executable != .EmptyString )
                    {
                        .PreBuildDependencies = .TargetList

                        Exec( '$ProjectName$-$ConfigPlatform$-$ConfigName$-$ConfigToolchain$-deploy-$DeployName$' )
                        {
                            .ExecExecutable = .Executable
                            .ExecInput = .Inputs
                            .ExecArguments = .Arguments
                            .ExecOutput = .Output
                            .ExecUseStdOutAsOutput = false
                            .ExecAlwaysShowOutput = true
                            .ExecAlways = true

                            If ( .ExecOutput == .EmptyString )
                            {
                                ^ExecUseStdOutAsOutput = true
                                ^ExecOutput = '$TargetOutputDirectory$/$ProjectName$_deploy_$DeployName$_log.txt'
                            }
                        }

                        ^TargetList = {
                            '$ProjectName$-$ConfigPlatform$-$ConfigName$-$ConfigToolchain$-deploy-$DeployName$'
                        }
                    }
                }

                Alias( '$ProjectConfigTarget$' )
                {
                    .Targets = .TargetList
                        + .TargetRuntimeDependencies
                }

                ^ConfigTargets + .ProjectConfigTarget
                ^AllConfigTargets + .ProjectConfigTarget
            }

            If( .ProjectKind == .Kind_HeaderOnly )
            {
                If ( .HasRuntimeDependencies )
                {
                    Alias( '$ProjectConfigTarget$' )
                    {
                        .Targets = .TargetRuntimeDependencies
                    }

                    ^ConfigTargets + .ProjectConfigTarget
                    ^AllConfigTargets + .ProjectConfigTarget
                }
            }
        }

    }

    ForEach( .AliasInfo in .AliasInfos )
    {
        Using( .AliasInfo )

        .HasAllTags = true
        ForEach( .Tag in .AliasTags )
        {
            If ( .Tag not in .ConfigTags )
            {
                ^HasAllTags = false
            }
        }

        If ( .HasAllTags )
        {
            .HasTargets = false
            ForEach (.T in .ConfigTargets)
            {
                ^HasTargets = true
            }

            .HasTestTargets = false
            ForEach (.T in .ConfigTargetsTests)
            {
                ^HasTestTargets = true
            }

            If ( .HasTargets )
            {
                Alias( "$AliasName$-$ConfigName$$AliasSuffix$" )
                {
                    .Targets = .ConfigTargets
                }
            }

            If ( .HasTestTargets )
            {
                Alias( "test-$AliasName$-$ConfigName$$AliasSuffix$" )
                {
                    .Targets = .ConfigTargetsTests
                }
            }
        }
    }
}
