
{
    // For now we don't enable VS Android Support
    .VSAndroidEnabled = false

    .VSFeature_Enabled = 'VSEnabled'
    .VSFeature_AndroidPlatform = 'VSAndroidPlatform'
    .VSFeature_AndroidGradleProject = 'VSAndroidGradleProject'

    .PlatformVSEnabled = false

    .SolutionProjects = { }
    .SolutionBuildProject = { }
    .SolutionDeployProjects = { }
    .SolutionConfigs = { }

    .SolutionFolders = { }
    .SolutionFolderIndex = 1
    .SolutionFolderGroupNames = { }
    .SolutionFolderCurrentName = ''
    .SolutionFolderCurrentProjects = { }
    .SolutionBuildProjectDependencies = { }

    .AllProjectConfigs = { }
    .AllTestsProjectConfigs = { }
    .HasAnyConfig = false

    Print( '[IBT] Creating vstudio targets...' )

    ForEach( .Pipeline in .AvailablePipelines )
    {
        .PipelineVSInfo = []
        Using( .Pipeline )

        .VSSuffix = ''
        .VSEnabled = false
        Using( .PipelineVSInfo )

        If ( .VSEnabled )
        {
            .PlatformVSName = ''

            Using( .PipelinePlatformInfo )

            If ( .PlatformVSName != .EmptyString )
            {
                .SolutionConfig =
                [
                    .Config = '$PipelineConfig$-$PipelineName$$VSSuffix$'
                    .Platform = .PlatformVSName

                    .SolutionConfig = '$PipelineConfig$'
                    .SolutionPlatform = '$PipelineName$$VSSuffix$'
                ]
                ^SolutionConfigs + .SolutionConfig

                .AllProjectConfig =
                [
                    Using( .SolutionConfig )

                    .ProjectBuildCommand = '^$(SolutionDir)/$UserScriptFile$ build -t all-$PipelineName$-$PipelineConfig$'
                    .ProjectRebuildCommand = '^$(SolutionDir)/$UserScriptFile$ build -t all-$PipelineName$-$PipelineConfig$ -c'
                ]
                ^AllProjectConfigs + .AllProjectConfig

                // .AllTestsProjectConfig =
                // [
                //     Using( .SolutionConfig )

                //     .ProjectBuildCommand = '^$(SolutionDir)/$UserScriptFile$ build -t test-all-^$(Platform)-^$(Configuration)'
                //     .ProjectRebuildCommand = '^$(SolutionDir)/$UserScriptFile$ build -t test-all-^$(Platform)-^$(Configuration) -c'
                // ]
                // ^AllTestsProjectConfigs + .AllTestsProjectConfig

                ^HasAnyConfig = true
            }
        }
    }

    If ( .HasAnyConfig )
    {
        VCXProject( 'all-vcxproj' )               // (optional) Alias
        {
            .ProjectOutput = '$WorkspaceBuildDir$/projects/all.vcxproj'
            .ProjectConfigs = .AllProjectConfigs
            .ProjectBasePath = .WorkspaceBuildDir
            .ProjectInputPaths = { }

            .IntermediateDirectory = '$WorkspaceBuildDir$/obj/helpers/all'
            .OutputDirectory = '$WorkspaceBuildDir$/obj/helpers/all'
        }

        // VCXProject( 'all-tests-vcxproj' )               // (optional) Alias
        // {
        //     .ProjectOutput = '$WorkspaceBuildDir$/projects/all_tests.vcxproj'
        //     .ProjectConfigs = .AllTestsProjectConfigs
        //     .ProjectBasePath = .WorkspaceBuildDir
        //     .ProjectInputPaths = { }

        //     .IntermediateDirectory = '$WorkspaceBuildDir$/obj/helpers/all_tests'
        //     .OutputDirectory = '$WorkspaceBuildDir$/obj/helpers/all_tests'
        // }

        .SolutionFolder =
        [
            .Path = '0. Miscelaneous'
            .Projects = { 'all-vcxproj' } ;, 'all-tests-vcxproj' }
        ]
        .SolutionFolders + .SolutionFolder

        {
            .HasSolutionItems = false
            ForEach( .Item in .SolutionItems )
            {
                ^HasSolutionItems = true
            }

            If ( .HasSolutionItems )
            {
                .SolutionFolder =
                [
                    .Path = '0. Miscelaneous/Files'
                    .Items = .SolutionItems
                ]
                ^SolutionFolders + .SolutionFolder
            }
        }

        .SolutionHasAppProjects = false
        .SolutionBuildProject = { 'all-vcxproj' }
        .PipelineAvailableProjects = [ ]

        ForEach( .Project in .ProjectsResolved )
        {
            Using( .Project )

            .ProjectOutput = '$WorkspaceBuildDir$/projects/$ProjectName$.vcxproj'
            .ProjectConfigs = { }
            .ProjectBasePath = .ProjectBaseDir
            .ProjectInputPaths = .ProjectVStudioInputPaths
            .ProjectFiles = {
                '$ProjectBaseDir$/$ProjectName$.bff'
            }
            .ProjectAllowedFileExtensions = {
                '*.h', '*.c', '*.hpp', '*.cpp', '*.cxx', '*.hxx', '*.inl',
                '*.m', '*.mm',
                '*.rc', '*.resx',
                '*.bff', '*.natvis'
            }

            Using( .Piepline_CompileVSTargets )

            ForEach( .Pipeline in .AvailablePipelines )
            {
                .PipelineVSInfo = []
                Using( .Pipeline )

                .VSSuffix = ''
                .VSEnabled = false
                Using( .PipelineVSInfo )

                If( .VSEnabled )
                {
                    Using( .PipelinePlatformInfo )
                    Using( .PipelineOutputExtensions )

                    // Check if we the project has all requirements covered
                    .ProjectEnabledFeatures = { }
                    {
                        .PipelineIdentifier = '$PipelineName$-$PipelinePlatform$-$PipelineConfig$-$PipelineToolchain$'
                        .'PipelineAvailableProjects_$PipelineIdentifier$' = { }

                        Using( .PipelineAvailableProjects )

                        .AvailableTags = .SDKNames
                            + .ProjectTags
                            + .PipelineTags
                            + .'PipelineAvailableProjects_$PipelineIdentifier$'

                        {
                            .ContainsAll = true
                            ForEach( .Requirement in .ProjectRequires )
                            {
                                If ( .Requirement not in .AvailableTags )
                                {
                                    // Print( "Requirement $Requirement$ not available for project $ProjectName$ in pipeline $PipelineIdentifier$" )
                                    ^ContainsAll = false
                                }
                            }
                            If ( .ContainsAll )
                            {
                                ^ProjectEnabledFeatures + .VSFeature_Enabled
                            }
                        }

                        If ( .VSFeature_Enabled in .ProjectEnabledFeatures )
                        {
                            If ( .VSAndroidEnabled )
                            {
                                .AndroidTag_SDK = 'SDK-Android'
                                .AndroidTag_GradleProject = 'Android-Gradle'

                                If ( .AndroidTag_SDK in .AvailableTags )
                                {
                                    ^ProjectEnabledFeatures + .VSFeature_AndroidPlatform
                                }
                                If ( .AndroidTag_GradleProject in .AvailableTags )
                                {
                                    ^ProjectEnabledFeatures + .VSFeature_AndroidGradleProject
                                }
                            }
                        }
                    }

                    .ProjectTarget = '$ProjectName$-$PipelineName$-$PipelinePlatform$-$PipelineConfig$-$PipelineToolchain$'

                    .OutDirName = .'KindOutDir_$ProjectKind$'
                    .TargetExtension = .'OutputExtension_$ProjectKind$'

                    .TargetIntermediateDirectory = '$WorkspaceBuildDir$/obj/$PipelineName$/$PipelinePlatform$-$PipelineConfig$-$PipelineToolchain$/$ProjectName$'
                    .TargetOutputDirectory = '$WorkspaceBuildDir$/$OutDirName$/$PipelineName$/$PipelinePlatform$-$PipelineConfig$-$PipelineToolchain$/$ProjectName$'
                    .TargetOutputName = "$ProjectName$$TargetExtension$"

                    If ( .PipelineOutputDirSuffix != .EmptyString )
                    {
                        ^TargetOutputDirectory = '$TargetOutputDirectory$/$PipelineOutputDirSuffix$'
                    }

                    If ( .ProjectKind in .Kind_Libraries )
                    {
                        .Prefix = .'OutputPrefix_$ProjectKind$'
                        ^TargetOutputName = '$Prefix$$TargetOutputName$'
                    }

                    .ProjectConfig =
                    [
                        .Config = '$PipelineConfig$-$PipelineName$$VSSuffix$'
                        .Platform = .PlatformVSName
                    ]

                    If ( .VSFeature_Enabled in .ProjectEnabledFeatures )
                    {
                        {
                            .PipelineIdentifier = '$PipelineName$-$PipelinePlatform$-$PipelineConfig$-$PipelineToolchain$'
                            .PipelineAvailableProjects_Extension =
                            [
                                .'PipelineAvailableProjects_$PipelineIdentifier$' = { .ProjectName }
                            ]
                            ^PipelineAvailableProjects + .PipelineAvailableProjects_Extension
                        }

                        .ProjectConfig_Extension =
                        [
                        ]

                        If ( .ProjectKind != .Kind_HeaderOnly )
                        {
                            ^ProjectConfig_Extension =
                            [
                                .Output = .TargetOutputName
                                .OutputDirectory = .TargetOutputDirectory
                                .IntermediateDirectory = .TargetIntermediateDirectory
                                .BuildLogFile = '$TargetIntermediateDirectory$/build_log.txt'
                            ]

                            If ( .ProjectTarget in .Piepline_CompileVSTargetsNames )
                            {
                                .ProjectConfig_BuildExtension =
                                [
                                    .Target = .'CompileTarget_$ProjectTarget$'

                                    .ProjectBuildCommand = '^$(SolutionDir)$UserScriptFile$ build -t $ProjectTarget$'
                                    .ProjectRebuildCommand = '^$(SolutionDir)$UserScriptFile$ build -t $ProjectTarget$ -c'
                                    .ProjectCleanCommand = '^$(SolutionDir)$UserScriptFile$ build -t $ProjectTarget$-clean'

                                    .LocalDebuggerCommand = '$TargetOutputDirectory$/$TargetOutputName$'
                                    .LocalDebuggerWorkingDirectory = .ProjectDebugDir
                                ]
                                ^ProjectConfig_Extension + .ProjectConfig_BuildExtension
                            }
                        }

                        ^ProjectConfig + .ProjectConfig_Extension
                    }

                    If ( .VSFeature_AndroidPlatform in .ProjectEnabledFeatures )
                    {
                        .ProjectConfig_Extension =
                        [
                            // .AndroidApkLocation =
                            .Keyword = 'Android'
                            .ApplicationType = 'Android'
                            .ApplicationTypeRevision = '3.0'
                        ]

                        If ( .VSFeature_AndroidGradleProject in .ProjectEnabledFeatures )
                        {
                            .ProjectConfig_Replacement =
                            [
                                Using( .ProjectConfig )

                                .AdditionalSymbolSearchPaths = "$TargetOutputDirectory$"
                                .ProjectBuildCommand = '^$(SolutionDir)$UserScriptFile$ android build -t :$ProjectName$:assemble$PipelineConfig$ --rerun-tasks'
                                .ProjectRebuildCommand = '^$(SolutionDir)$UserScriptFile$ android build -t :$ProjectName$:assemble$PipelineConfig$ --rerun-tasks'
                            ]
                            ^ProjectConfig = .ProjectConfig_Replacement
                        }

                        ^ProjectConfig + .ProjectConfig_Extension
                    }

                    If ( .ProjectKind == .Kind_HeaderOnly )
                    {
                        Using( .PipelineSolutionInfo )
                        Using( .'SolutionInfo_$ProjectTarget$' )
                        Using( .Intellisense )

                        .ProjectConfig_Intellisense =
                        [
                            .PreprocessorDefinitions = ''
                            .IncludeSearchPath = ''
                            .AdditionalOptions = ''

                            ForEach( .Value in .Defines )
                            {
                                ^PreprocessorDefinitions + '$Value$;'
                            }
                            ForEach( .Value in .IncludeDirs )
                            {
                                ^IncludeSearchPath + '$Value$;'
                            }
                            ForEach( .Value in .BuildOptions )
                            {
                                ^AdditionalOptions + '$Value$ '
                            }
                        ]

                        ^ProjectConfig + .ProjectConfig_Intellisense
                    }

                    ^ProjectConfigs + .ProjectConfig
                }
            }

            VCXProject( '$ProjectName$-vcxproj' )               // (optional) Alias
            {
            }

            If ( .ProjectKind in .Kind_Applications )
            {
                ^SolutionBuildProjectDependencies + '$ProjectName$-vcxproj'
                ^SolutionHasAppProjects = true
            }

            If ( .ProjectGroup not in .SolutionFolderGroupNames )
            {
                .HasProjects = false
                ForEach( .P in .SolutionFolderCurrentProjects )
                {
                    ^HasProjects = true
                }

                If ( .HasProjects )
                {
                    .SolutionFolder =
                    [
                        .Path = '$SolutionFolderIndex$. $SolutionFolderCurrentName$'
                        .Projects = .SolutionFolderCurrentProjects
                    ]
                    ^SolutionFolders + .SolutionFolder
                    ^SolutionFolderCurrentProjects = { }
                    ^SolutionFolderIndex + 1
                }

                ^SolutionFolderGroupNames + .ProjectGroup
                ^SolutionFolderCurrentName = .ProjectGroup
            }

            If ( .ProjectGroup == .SolutionFolderCurrentName )
            {
                ^SolutionFolderCurrentProjects + '$ProjectName$-vcxproj'
            }

            ^SolutionProjects + '$ProjectName$-vcxproj'
        }

        .SolutionFolder =
        [
            .Path = '$SolutionFolderIndex$. $SolutionFolderCurrentName$'
            .Projects = .SolutionFolderCurrentProjects
        ]
        .SolutionFolders + .SolutionFolder

        .SolutionDependency =
        [
            .Dependencies = { 'all-vcxproj' }
            .Projects = .SolutionBuildProjectDependencies

            ; If no application project is part of this solution set dependencies on all other projects
            If ( !.SolutionHasAppProjects )
            {
                ^Projects = .SolutionFolderCurrentProjects
            }
        ]
        .SolutionDependencies = { .SolutionDependency }

        VSSolution( 'vstudio' )
        {
            .SolutionOutput = '$WorkspaceRoot$/$UserSolutionName$'
        }
    }

    Print( '[IBT] VStudio targets created.' )

}
