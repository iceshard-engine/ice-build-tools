
.Properties =
[
    // Dependency properties
    .Uses = { }
    .Modules = { }
    .DependsOn = []

    // Compiler properties
    .Defines = { }
    .IncludeDirs = { }
    .BuildOptions = { }

    // Linker properties
    .Libs = { }
    .LibDirs = { }
]

// Global structure of public project properties
.ProjectPropertiesStruct = [ ]

// Build final project structures for each project in the list
ForEach( .Project in .Projects )
{
    .Public = []
    .Private = []
    .Requires = { }

    // Miscelaneous
    .UnityBuilds = true
    .CopyModules = false
    .DependsOn = []

    .Group = .DefaultGroup

    .InputPaths = {
        'private'
    }
    .VStudioPaths = {
        'natvis'
        'public'
    } + .InputPaths

    .DebugDir = '$WorkspaceBuildDir$'

    Using( .Project )

    .ResolvedProject =
    [
        .ProjectName = .Name
        .ProjectKind = .Kind
        .ProjectBaseDir = .BaseDir
        .ProjectRequires = .Requires
        .ProjectGroup = ^Group
        .ProjectDebugDir = .DebugDir

        .ProjectSourcePaths = { }
        ForEach( .Path in .InputPaths )
        {
            ^ProjectSourcePaths + "$ProjectBaseDir$/$Path$"
        }

        .ProjectVStudioInputPaths = { }
        ForEach( .Path in .VStudioPaths )
        {
            ^ProjectVStudioInputPaths + "$ProjectBaseDir$/$Path$"
        }

        // Public properties
        .ProjectProperties_Public =
        [
            Using( .Properties )
            Using( .Public )

            // Gather public uses
            {
                Using( .ProjectPropertiesStruct )

                .UsesUnique = .Uses
                ForEach( .Dependency in .Uses )
                {
                    Using( .'ProjectProperties_$Dependency$' )
                    ForEach( .Value in .Uses )
                    {
                        If ( .Value not in .UsesUnique )
                        {
                            ^UsesUnique + .Value
                        }
                    }
                }
                ^Uses = .UsesUnique
            }

            .IncludeDirs + {
                '$ProjectBaseDir$/public'
            }
        ]

        // Private properties
        .ProjectProperties_Private =
        [
            Using( .Properties )
            Using( .Private )

            // Gather private uses
            {
                Using( .ProjectPropertiesStruct )

                .UsesUnique = .Uses
                ForEach( .Dependency in .Uses )
                {
                    Using( .'ProjectProperties_$Dependency$' )
                    ForEach( .Value in .Uses )
                    {
                        If ( .Value not in .UsesUnique )
                        {
                            ^UsesUnique + .Value
                        }
                    }
                }
                ^Uses = .UsesUnique
            }

            .UnityBuilds = ^UnityBuilds
            .CopyModules = ^CopyModules
            .Dependencies = .DependsOn
        ]

        // Final properties
        .ProjectProperties_Final = []
        {
            Using( .ProjectPropertiesStruct )

            .ProjectProperties_Combined = [ ]
                + .ProjectProperties_Private
                + .ProjectProperties_Public

            // Gether dependency properties
            .GatheredDependencies = { }
            .GatheredProperties = {
                'Modules'
                'Defines'
                'IncludeDirs'
            }

            ^ProjectProperties_Final =
            [
                Using( .ProjectProperties_Combined )

                .LibraryTargets = { }

                ForEach( .Dependency in .Uses )
                {
                    If ( .Dependency not in .GatheredDependencies )
                    {
                        ^GatheredDependencies + .Dependency
                        // Print( "$ProjectName$: Gathering $Dependency$..." )

                        ForEach( .Property in .GatheredProperties )
                        {
                            Using( .'ProjectProperties_$Dependency$' )
                            ^'$Property$' + .'$Property$'
                        }
                    }

                    ^LibraryTargets + .Dependency
                }

                .Uses = .GatheredDependencies
            ]
        }

    ]

    ^ProjectsResolved + .ResolvedProject

    // Save the public properties for later
    {
        Using( .ResolvedProject )
        .ProjectPropertiesEntry =
        [
            .'ProjectProperties_$ProjectName$' = .ProjectProperties_Public
        ]
        ^ProjectPropertiesStruct + .ProjectPropertiesEntry
    }
}
